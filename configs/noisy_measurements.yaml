# ============================================================================
# NOISY MEASUREMENTS CONFIGURATION
# ============================================================================
# Purpose: Test algorithm robustness with realistic noisy conditions
# Use Case: Challenging real-world deployments
#           - Indoor WiFi/Bluetooth ranging
#           - Underwater acoustic networks
#           - Urban environments with multipath
#           - Low-cost sensor hardware
# Expected Performance:
#   - Runtime: 15-30 seconds (slower due to noise)
#   - Relative Error: 0.20-0.40 (degraded by noise)
#   - RMSE: 3-8 meters in 20m × 20m area
# Noise Characteristics:
#   - 15% Gaussian noise (3x typical)
#   - 10% outlier rate (non-line-of-sight)
#   - No carrier phase (unreliable in noise)
# ============================================================================

# Inherit from default configuration
extends: default.yaml

# ----------------------------------------------------------------------------
# NETWORK CONFIGURATION - Realistic deployment scenario
# ----------------------------------------------------------------------------
network:
  # Slightly larger network to test scalability with noise
  n_sensors: 35
  
  # Standard anchor ratio
  n_anchors: 7
  
  # 20m × 20m deployment area (e.g., warehouse, building floor)
  # Larger scale makes noise impact more realistic
  # 15% of 10m = 1.5m error, significant for localization
  scale: 20.0
  
  # Slightly higher communication range for robustness
  # 0.35 × 20m = 7m communication radius
  # Ensures good connectivity despite failures
  communication_range: 0.35

# ----------------------------------------------------------------------------
# MEASUREMENT CONFIGURATION - Challenging noise conditions
# ----------------------------------------------------------------------------
measurements:
  # High Gaussian noise simulating poor conditions
  # 15% noise means ±1.5m error at 10m distance
  # Typical causes:
  #   - Temperature/humidity variations
  #   - Clock drift and synchronization errors
  #   - Antenna pattern variations
  #   - Signal processing limitations
  noise_factor: 0.15
  
  # Significant outlier rate from NLOS/multipath
  # 10% of measurements are corrupted
  # Outliers modeled as: measured = true × uniform(0.5, 2.0)
  # Simulates:
  #   - Multipath reflections (longer path)
  #   - Obstacles causing NLOS
  #   - Hardware glitches
  #   - Interference from other systems
  outlier_probability: 0.10
  
  # Standard distance measurements
  # Could also test with "rssi" for even more noise
  measurement_type: "distance"
  
  # Disable carrier phase - unreliable with high noise
  # Phase measurements very sensitive to multipath
  # Integer ambiguity resolution fails with 15% noise
  carrier_phase: false
  
  # Different seed for varied test scenarios
  seed: 777

# ----------------------------------------------------------------------------
# ALGORITHM CONFIGURATION - Robust parameters for noisy data
# ----------------------------------------------------------------------------
algorithm:
  # Conservative mixing for stability
  # γ=0.99 provides good balance
  # Not too aggressive (would amplify noise)
  # Not too conservative (would be too slow)
  gamma: 0.99
  
  # Moderate step size to avoid amplifying noise
  # α=2.0 is conservative enough for stability
  # Large α would cause oscillations with noisy gradients
  # Small α would take too long to converge
  alpha: 2.0
  
  # More iterations needed due to noise
  # Noisy gradients mean slower, less direct convergence
  # 1500 iterations allows algorithm to "average out" noise
  # May need even more for very high noise
  max_iterations: 1500
  
  # Relaxed tolerance - can't achieve high precision with noise
  # 1e-4 is realistic for 15% noise conditions
  # Tighter tolerance would never be achieved
  # Algorithm would run maximum iterations
  tolerance: 1e-4
  
  # Robustness features all enabled
  early_stopping: true
  
  # Longer window needed for noisy objective
  # Objective fluctuates due to noise
  # Need to average over many iterations
  # 200 iterations ≈ 13% of total, reasonable window
  early_stopping_window: 200
  
  # 2-block structure still important for constraints
  use_2block: true
  
  # Adaptive alpha crucial for noisy problems
  # Reduces step size as noise dominates near convergence
  # Helps achieve better final accuracy
  # May reduce α from 2.0 to 0.5 near optimum
  adaptive_alpha: true

# ----------------------------------------------------------------------------
# ADMM CONFIGURATION - Robust inner solver settings
# ----------------------------------------------------------------------------
admm:
  # More iterations to handle noisy subproblems
  # Each proximal problem contaminated by noise
  # Need more iterations to find reasonable solution
  # 150 iterations balances accuracy and speed
  iterations: 150
  
  # Relaxed tolerance matching outer algorithm
  # Can't solve inner problem more accurately than data quality
  tolerance: 1e-4
  
  # Smaller penalty for stability with noise
  # ρ=0.5 emphasizes objective (smooths noise)
  # Large ρ would overfit to noisy constraints
  # Small ρ provides regularization effect
  rho: 0.5
  
  # Warm start still beneficial
  warm_start: true

# ----------------------------------------------------------------------------
# PERFORMANCE CONFIGURATION - Track everything for analysis
# ----------------------------------------------------------------------------
performance:
  # Essential to track metrics with noise
  # Need to see if converging or oscillating
  track_metrics: true
  
  # Moderate logging frequency
  # Every 50 iterations = 3% progress updates
  log_interval: 50
  
  # Save checkpoints for difficult problems
  # May need to restart if diverges
  # Can analyze intermediate solutions
  save_checkpoints: true

# ----------------------------------------------------------------------------
# OUTPUT CONFIGURATION - Full output for noise analysis
# ----------------------------------------------------------------------------
output:
  output_dir: "results/noisy_measurements/"
  
  # Save intermediate results to analyze noise effects
  # Can see how solution evolves despite noise
  save_interval: 100
  
  # Save everything for post-processing
  save_positions: true
  save_metrics: true
  
  # Plots essential for understanding noise impact
  # Show convergence despite fluctuations
  # Error distribution analysis
  plot_results: true
  
  # Verbose output to monitor challenging convergence
  # Need to see if making progress or stuck
  verbose: true