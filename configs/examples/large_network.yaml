# Large Network Configuration
# ============================
# Purpose: Stress testing and scalability evaluation
# Expected runtime: 10-30 seconds (depending on MPI processes)
# Expected RMSE: 0.5-1.5 units (meters by default)
# Recommended: Run with MPI for best performance

network:
  # Number of sensors to localize
  # 100 sensors tests scalability limits
  n_sensors: 100
  
  # More anchors improve localization accuracy
  # Rule of thumb: sqrt(n_sensors) anchors
  n_anchors: 10
  
  # Smaller communication range creates sparser network
  # 0.2 = each sensor connects to ~20% of nearby nodes
  # This tests performance with limited connectivity
  communication_range: 0.2
  
  # 2D localization (change to 3 for 3D)
  dimension: 2
  
  # Network scale (meters) - not specified, uses default
  # With 100 sensors in 10x10m, density = 1 sensor/mÂ²
  # scale: 10.0

measurements:
  # Higher noise for realistic conditions
  # 0.08 = 8% multiplicative noise
  # This simulates real-world measurement uncertainty
  noise_factor: 0.08
  
  # Random seed for reproducibility
  seed: 999
  
  # Outlier probability (if using robust methods)
  # outlier_probability: 0.05

algorithm:
  # High gamma for numerical stability
  # 0.999 prevents oscillations in large networks
  # Trade-off: slower convergence
  gamma: 0.999
  
  # Conservative step size for stability
  # 0.8 prevents overshooting in sparse networks
  alpha: 0.8
  
  # More iterations needed for large networks
  # Typically converges in 300-500 iterations
  max_iterations: 1000
  
  # Tighter tolerance for better accuracy
  # 0.000001 meters = 1 micrometer precision
  tolerance: 0.000001
  
  # Algorithm name (mps, admm, distributed_mps)
  # name: "distributed_mps"

mpi:
  # Enable MPI for distributed computation
  # Highly recommended for networks > 50 sensors
  enable: true
  
  # Number of MPI processes
  # Optimal: 1 process per 10-20 sensors
  # Must run with: mpirun -n 8 python script.py
  n_processes: 8
  
  # Advanced MPI settings (optional)
  # async_communication: true
  # buffer_size: 1024

output:
  # Save final results to JSON
  save_results: true
  
  # Output directory for results
  output_dir: "results/large/"
  
  # Minimal output for large networks
  # Set to true for debugging
  verbose: false
  
  # Save checkpoints every N iterations
  # Useful for analyzing convergence
  save_interval: 100
  
  # Additional output options
  # save_convergence_history: true
  # save_network_topology: true
  # save_timing_info: true